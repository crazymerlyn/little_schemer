(define (atom? x) (and (not (pair? x)) (not (null? x))))
(define (lat? l)
  (cond ((null? l) #t)
        ((atom? (car l)) (lat? (cdr l)))
        (else #f)))
(define (member? a lat)
  (cond ((null? lat) #f)
        (else (or (eq? a (car lat)))
              (member? a (cdr lat)))))
(define (rember a lat)
  (cond ((null? lat) '())
        ((eq? a (car lat)) (cdr lat))
        (else (cons (car lat)
                    (rember a (cdr lat))))))
(define (firsts l)
  (cond ((null? l) '())
        (else (cons (caar l) (firsts (cdr l))))))

(define (insertR new old lat)
  (cond ((null? lat) '())
        ((eq? old (car lat)) (cons (car lat) (cons new (cdr lat))))
        (else (cons (car lat) (insertR new old (cdr lat))))))

(define (insertL new old lat)
  (cond ((null? lat) '())
        ((eq? old (car lat)) (cons new lat))
        (else (cons (car lat) (insertL new old (cdr lat))))))

(define (subst new old lat)
  (cond ((null? lat) '())
        ((eq? old (car lat)) (cons new (cdr lat)))
        (else (cons (car lat) (subst new old (cdr lat))))))

(define (multi-rember a lat)
  (cond ((null? lat) '())
        ((eq? a (car lat)) (multi-rember a (cdr lat)))
        (else (cons (car lat) (multi-rember a (cdr lat))))))

(define (multi-insertR new old lat)
  (cond ((null? lat) '())
        ((eq? old (car lat))
         (cons old (cons new (multi-insertR new old (cdr lat)))))
        (else (cons (car lat) (multi-insertR new old (cdr lat))))))

(define (multi-insertL new old lat)
  (cond ((null? lat) '())
        ((eq? old (car lat))
         (cons new (cons old (multi-insertL new old (cdr lat)))))
        (else (cons (car lat) (multi-insertL new old (cdr lat))))))

(define (multi-subst new old lat)
  (cond ((null? lat) '())
        ((eq? old (car lat))
         (cons new (multi-subst new old (cdr lat))))
        (else (cons (car lat) (multi-subst new old (cdr lat))))))
