(load "base.scm")
(define (rember* a l)
  (cond ((null? l) '())
        ((eq? a (car l)) (rember* a (cdr l)))
        ((not (atom? (car l))) (cons (rember* a (car l))
                                     (rember* a (cdr l))))
        (else (cons (car l) (rember* a (cdr l))))))

(define (insertR* new old l)
  (cond ((null? l) '())
        ((atom? (car l))
         (cond
           ((eq? old (car l)) (cons old (cons new (insertR* new old (cdr l)))))
           (else (cons (car l) (insertR* new old (cdr l))))))
        (else (cons (insertR* new old (car l))
                    (insertR* new old (cdr l))))))
